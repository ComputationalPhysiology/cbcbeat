# A Model For Human Ventricular Tissue - M-cell variant
# 
# ABSTRACT: The experimental and clinical possibilities for studying cardiac
# arrhythmias in human ventricular myocardium are very limited. Therefore, the
# use of alternative methods such as computer simulations is of great importance.
# In this article we introduce a mathematical model of the action potential of
# human ventricular cells that, while including a high level of
# electrophysiological detail, is computationally cost-effective enough to be
# applied in large-scale spatial simulations for the study of reentrant
# arrhythmias. The model is based on recent experimental data on most of the
# major ionic currents: the fast sodium, L-type calcium, transient outward, rapid
# and slow delayed rectifier, and inward rectifier currents. The model includes a
# basic calcium dynamics, allowing for the realistic modeling of calcium
# transients, calcium current inactivation, and the contraction staircase. We are
# able to reproduce human epicardial, endocardial, and M cell action potentials
# and show that differences can be explained by differences in the transient
# outward and slow delayed rectifier currents. Our model reproduces the
# experimentally observed data on action potential duration restitution, which is
# an important characteristic for reentrant arrhythmias. The conduction velocity
# restitution of our model is broader than in other models and agrees better with
# available data. Finally, we model the dynamics of spiral wave rotation in a
# two-dimensional sheet of human ventricular tissue and show that the spiral wave
# follows a complex meandering pattern and has a period of 265 ms. We conclude
# that the proposed model reproduces a variety of electrophysiological behaviors
# and provides a basis for studies of reentrant arrhythmias in human ventricular
# tissue.
# 
# The original paper reference is cited below:
# 
# A model for human ventricular tissue, K.H.W.J. ten Tusscher, D. Noble, P.J.
# Noble, and A.V. Panfilov, 2004,American Journal of Physiology, 286,
# H1573-H1589.PubMed ID: 14656705
# 

# gotran file generated by cellml2gotran from tentusscher_noble_noble_panfilov_2004_a.cellml

parameters("Reversal potentials",
           P_kna = 0.03)

parameters("Inward rectifier potassium current",
           g_K1 = ScalarParam(5.405, unit="nS*pF**-1"))

parameters("Rapid time dependent potassium current",
           g_Kr = ScalarParam(0.096, unit="nS*pF**-1"))

states("Rapid time dependent potassium current", "Xr1 gate",
       Xr1 = 0)

states("Rapid time dependent potassium current", "Xr2 gate",
       Xr2 = 1)

parameters("Slow time dependent potassium current",
           g_Ks = ScalarParam(0.062, unit="nS*pF**-1"))

states("Slow time dependent potassium current", "Xs gate",
       Xs = 0)

parameters("Fast sodium current",
           g_Na = ScalarParam(14.838, unit="nS*pF**-1"))

states("Fast sodium current", "m gate",
       m = 0)

states("Fast sodium current", "h gate",
       h = 0.75)

states("Fast sodium current", "j gate",
       j = 0.75)

parameters("Sodium background current",
           g_bna = ScalarParam(0.00029, unit="nS*pF**-1"))

parameters("L_type Ca current",
           g_CaL = ScalarParam(0.000175, unit="l*F**-1*s**-1"))

states("L_type Ca current", "d gate",
       d = 0)

states("L_type Ca current", "f gate",
       f = 1)

states("L_type Ca current", "FCa gate",
       fCa = 1)

parameters("Calcium background current",
           g_bca = ScalarParam(0.000592, unit="nS*pF**-1"))

parameters("Transient outward current",
           g_to = ScalarParam(0.294, unit="nS*pF**-1"))

states("Transient outward current", "s gate",
       s = 1)

states("Transient outward current", "r gate",
       r = 0)

parameters("Sodium potassium pump current",
           P_NaK = ScalarParam(1.362, unit="pA*pF**-1"),
           K_mk = ScalarParam(1, unit="mM"),
           K_mNa = ScalarParam(40, unit="mM"))

parameters("Sodium calcium exchanger current",
           K_NaCa = ScalarParam(1000, unit="pA*pF**-1"),
           K_sat = 0.1,
           alpha = 2.5,
           gamma = 0.35,
           Km_Ca = ScalarParam(1.38, unit="mM"),
           Km_Nai = ScalarParam(87.5, unit="mM"))

parameters("Calcium pump current",
           g_pCa = ScalarParam(0.825, unit="pA*pF**-1"),
           K_pCa = ScalarParam(0.0005, unit="mM"))

parameters("Potassium pump current",
           g_pK = ScalarParam(0.0146, unit="nS*pF**-1"))

states("Calcium dynamics",
       g = 1,
       Ca_i = ScalarParam(0.0002, unit="mM"),
       Ca_SR = ScalarParam(0.2, unit="mM"))

parameters("Calcium dynamics",
           Ca_o = ScalarParam(2, unit="mM"),
           tau_g = ScalarParam(2, unit="ms"),
           a_rel = ScalarParam(0.016464, unit="mM*ms**-1"),
           b_rel = ScalarParam(0.25, unit="mM"),
           c_rel = ScalarParam(0.008232, unit="mM*ms**-1"),
           K_up = ScalarParam(0.00025, unit="mM"),
           V_leak = ScalarParam(8e-5, unit="ms**-1"),
           Vmax_up = ScalarParam(0.000425, unit="mM*ms**-1"),
           Buf_c = ScalarParam(0.15, unit="mM"),
           K_buf_c = ScalarParam(0.001, unit="mM"),
           Buf_sr = ScalarParam(10, unit="mM"),
           K_buf_sr = ScalarParam(0.3, unit="mM"),
           V_sr = ScalarParam(0.001094, unit="um**3"))

states("Sodium dynamics",
       Na_i = ScalarParam(11.6, unit="mM"))

parameters("Sodium dynamics",
           Na_o = ScalarParam(140, unit="mM"))

states("Membrane",
       V = ScalarParam(-86.2, unit="mV"))

parameters("Membrane",
           R = ScalarParam(8314.472, unit="J*mole**-1*K**-1"),
           T = ScalarParam(310, unit="K"),
           F = ScalarParam(96485.3415, unit="C*mmole**-1"),
           Cm = ScalarParam(0.185, unit="uF"),
           V_c = ScalarParam(0.016404, unit="um**3"),
           stim_start = ScalarParam(10, unit="ms"),
           stim_period = ScalarParam(1000, unit="ms"),
           stim_duration = ScalarParam(1, unit="ms"),
           stim_amplitude = ScalarParam(0, unit="pA*pF**-1"))

states("Potassium dynamics",
       K_i = ScalarParam(138.3, unit="mM"))

parameters("Potassium dynamics",
           K_o = ScalarParam(5.4, unit="mM"))

component("Reversal potentials")
E_Na = R*T/F*log(Na_o/Na_i)
E_K = R*T/F*log(K_o/K_i)
E_Ks = R*T/F*log((K_o + P_kna*Na_o)/(K_i + P_kna*Na_i))
E_Ca = 0.5*R*T/F*log(Ca_o/Ca_i)

component("Inward rectifier potassium current")
alpha_K1 = 0.1/(1 + exp(0.06*(V - E_K - 200)))
beta_K1 = (3*exp(0.0002*(V - E_K + 100)) + exp(0.1*(V - E_K - 10)))/(1 + exp(-0.5*(V - E_K)))
xK1_inf = alpha_K1/(alpha_K1 + beta_K1)
i_K1 = g_K1*xK1_inf*sqrt(K_o/5.4)*(V - E_K)

component("Rapid time dependent potassium current")
i_Kr = g_Kr*sqrt(K_o/5.4)*Xr1*Xr2*(V - E_K)

component("Rapid time dependent potassium current", "Xr1 gate")
xr1_inf = 1/(1 + exp((-26 - V)/7))
alpha_xr1 = 450/(1 + exp((-45 - V)/10))
beta_xr1 = 6/(1 + exp((V + 30)/11.5))
tau_xr1 = 1*alpha_xr1*beta_xr1
dXr1_dt = (xr1_inf - Xr1)/tau_xr1

component("Rapid time dependent potassium current", "Xr2 gate")
xr2_inf = 1/(1 + exp((V + 88)/24))
alpha_xr2 = 3/(1 + exp((-60 - V)/20))
beta_xr2 = 1.12/(1 + exp((V - 60)/20))
tau_xr2 = 1*alpha_xr2*beta_xr2
dXr2_dt = (xr2_inf - Xr2)/tau_xr2

component("Slow time dependent potassium current")
i_Ks = g_Ks*Xs**2*(V - E_Ks)

component("Slow time dependent potassium current", "Xs gate")
xs_inf = 1/(1 + exp((-5 - V)/14))
alpha_xs = 1100/sqrt(1 + exp((-10 - V)/6))
beta_xs = 1/(1 + exp((V - 60)/20))
tau_xs = 1*alpha_xs*beta_xs
dXs_dt = (xs_inf - Xs)/tau_xs

component("Fast sodium current")
i_Na = g_Na*m**3*h*j*(V - E_Na)

component("Fast sodium current", "m gate")
m_inf = 1/(1 + exp((-56.86 - V)/9.03))**2
alpha_m = 1/(1 + exp((-60 - V)/5))
beta_m = 0.1/(1 + exp((V + 35)/5)) + 0.1/(1 + exp((V - 50)/200))
tau_m = 1*alpha_m*beta_m
dm_dt = (m_inf - m)/tau_m

component("Fast sodium current", "h gate")
h_inf = 1/(1 + exp((V + 71.55)/7.43))**2
alpha_h = ContinuousConditional(Lt(V, -40), 0.057*exp(-(V + 80)/6.8), 0)
beta_h = ContinuousConditional(Lt(V, -40), 2.7*exp(0.079*V) + 310000*exp(0.3485*V), 0.77/(0.13*(1 + exp((V + 10.66)/-11.1))))
#alpha_h = Conditional(Lt(V, -40), 0.057*exp(-(V + 80)/6.8), 0)
#beta_h = Conditional(Lt(V, -40), 2.7*exp(0.079*V) + 310000*exp(0.3485*V), 0.77/(0.13*(1 + exp((V + 10.66)/-11.1))))
tau_h = 1/(alpha_h + beta_h)
dh_dt = (h_inf - h)/tau_h

component("Fast sodium current", "j gate")
j_inf = 1/(1 + exp((V + 71.55)/7.43))**2
alpha_j = ContinuousConditional(Lt(V, -40), (-25428*exp(0.2444*V) - 6.948e-6*exp(-0.04391*V))*(V + 37.78)/1/(1 + exp(0.311*(V + 79.23))), 0)
beta_j = ContinuousConditional(Lt(V, -40), 0.02424*exp(-0.01052*V)/(1 + exp(-0.1378*(V + 40.14))), 0.6*exp(0.057*V)/(1 + exp(-0.1*(V + 32))))
#alpha_j = Conditional(Lt(V, -40), (-25428*exp(0.2444*V) - 6.948e-6*exp(-0.04391*V))*(V + 37.78)/1/(1 + exp(0.311*(V + 79.23))), 0)
#beta_j = Conditional(Lt(V, -40), 0.02424*exp(-0.01052*V)/(1 + exp(-0.1378*(V + 40.14))), 0.6*exp(0.057*V)/(1 + exp(-0.1*(V + 32))))
tau_j = 1/(alpha_j + beta_j)
dj_dt = (j_inf - j)/tau_j

component("Sodium background current")
i_b_Na = g_bna*(V - E_Na)

component("L_type Ca current")
i_CaL = g_CaL*d*f*fCa*4*V*F**2/(R*T)*(Ca_i*exp(2*V*F/(R*T)) - 0.341*Ca_o)/(exp(2*V*F/(R*T)) - 1)

component("L_type Ca current", "d gate")
d_inf = 1/(1 + exp((-5 - V)/7.5))
alpha_d = 1.4/(1 + exp((-35 - V)/13)) + 0.25
beta_d = 1.4/(1 + exp((V + 5)/5))
gamma_d = 1/(1 + exp((50 - V)/20))
tau_d = 1*alpha_d*beta_d + gamma_d
dd_dt = (d_inf - d)/tau_d

component("L_type Ca current", "f gate")
f_inf = 1/(1 + exp((V + 20)/7))
tau_f = 1125*exp(-((V + 27)**2)/240) + 80 + 165/(1 + exp((25 - V)/10))
df_dt = (f_inf - f)/tau_f

component("L_type Ca current", "FCa gate")
alpha_fCa = 1/(1 + (Ca_i/0.000325)**8)
exp_arg_0 = (Ca_i - 0.0005)/0.0001
exp_arg_00 = Conditional(Lt(exp_arg_0, 500.), exp_arg_0, 500.) 
beta_fCa = 0.1/(1 + exp(exp_arg_00))
exp_arg_1 = (Ca_i - 0.00075)/0.0008
exp_arg_11 = Conditional(Lt(exp_arg_1, 500.), exp_arg_1, 500.) 
gama_fCa = 0.2/(1 + exp(exp_arg_11))
#beta_fCa = 0.1/(1 + exp((Ca_i - 0.0005)/0.0001))
#gama_fCa = 0.2/(1 + exp((Ca_i - 0.00075)/0.0008))
fCa_inf = (alpha_fCa + beta_fCa + gama_fCa + 0.23)/1.46
tau_fCa = 2
d_fCa = (fCa_inf - fCa)/tau_fCa
dfCa_dt = Conditional(And(Gt(fCa_inf, fCa), Gt(V, -60), ), 0, d_fCa)

component("Calcium background current")
i_b_Ca = g_bca*(V - E_Ca)

component("Transient outward current")
i_to = g_to*r*s*(V - E_K)

component("Transient outward current", "s gate")
s_inf = 1/(1 + exp((V + 20)/5))
tau_s = 85*exp(-((V + 45)**2)/320) + 5/(1 + exp((V - 20)/5)) + 3
ds_dt = (s_inf - s)/tau_s

component("Transient outward current", "r gate")
r_inf = 1/(1 + exp((20 - V)/6))
tau_r = 9.5*exp(-((V + 40)**2)/1800) + 0.8
dr_dt = (r_inf - r)/tau_r

component("Sodium potassium pump current")
i_NaK = P_NaK*K_o/(K_o + K_mk)*Na_i/(Na_i + K_mNa)/(1 + 0.1245*exp(-0.1*V*F/(R*T)) + 0.0353*exp(-V*F/(R*T)))

component("Sodium calcium exchanger current")
i_NaCa = K_NaCa*(exp(gamma*V*F/(R*T))*Na_i**3*Ca_o - exp((gamma - 1)*V*F/(R*T))*Na_o**3*Ca_i*alpha)/((Km_Nai**3 + Na_o**3)*(Km_Ca + Ca_o)*(1 + K_sat*exp((gamma - 1)*V*F/(R*T))))

component("Calcium pump current")
i_p_Ca = g_pCa*Ca_i/(Ca_i + K_pCa)

component("Potassium pump current")
i_p_K = g_pK*(V - E_K)/(1 + exp((25 - V)/5.98))

component("Calcium dynamics")
i_rel = (a_rel*Ca_SR**2/(b_rel**2 + Ca_SR**2) + c_rel)*d*g
i_up = Vmax_up/(1 + K_up**2/Ca_i**2)
i_leak = V_leak*(Ca_SR - Ca_i)
#g_inf = Conditional(Lt(Ca_i, 0.00035), 1/(1 + (Ca_i/0.00035)**6), 1/(1 + (Ca_i/0.00035)**16))
g_inf = ContinuousConditional(Lt(Ca_i, 0.00035), 1/(1 + (Ca_i/0.00035)**6), 1/(1 + (Ca_i/0.00035)**16), 0.0001)
d_g = (g_inf - g)/tau_g
#dg_dt = Conditional(And(Gt(g_inf, g), Gt(V, -60), ), 0, d_g)
dg_dt = (1-ContinuousConditional(Le(g_inf, g), 1., 0, 0.1)*ContinuousConditional(Le(V, -60), 1, 0, 1))*d_g
Ca_i_bufc = 1/(1 + Buf_c*K_buf_c/(Ca_i + K_buf_c)**2)
Ca_sr_bufsr = 1/(1 + Buf_sr*K_buf_sr/(Ca_SR + K_buf_sr)**2)
dCa_i_dt = Ca_i_bufc*(i_leak - i_up + i_rel - 1*(i_CaL + i_b_Ca + i_p_Ca - 2*i_NaCa)/(2*1*V_c*F)*Cm)
dCa_SR_dt = Ca_sr_bufsr*V_c/V_sr*(i_up - (i_rel + i_leak))

component("Sodium dynamics")
dNa_i_dt = -1*(i_Na + i_b_Na + 3*i_NaK + 3*i_NaCa)*Cm/(1*V_c*F)

component("Membrane")
i_Stim = -stim_amplitude*ContinuousConditional(Ge(time, stim_start), 1, 0, 0.2)*ContinuousConditional(Le(time, stim_start + stim_duration), 1, 0, 0.2)
#i_Stim = Conditional(And(Ge(time - floor(time/stim_period)*stim_period, stim_start), Le(time - floor(time/stim_period)*stim_period, stim_start + stim_duration), ), -stim_amplitude, 0)
dV_dt = -1/1*(i_K1 + i_to + i_Kr + i_Ks + i_CaL + i_NaK + i_Na + i_b_Na + i_NaCa + i_b_Ca + i_p_K + i_p_Ca + i_Stim)

component("Potassium dynamics")
dK_i_dt = -1*(i_K1 + i_to + i_Kr + i_Ks + i_p_K + i_Stim - 2*i_NaK)*Cm/(1*V_c*F)

